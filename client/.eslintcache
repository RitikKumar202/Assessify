[{"C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\index.js":"1","C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\serviceWorker.js":"2","C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\App.js":"3","C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\redux\\configureStore.js":"4","C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\Main.js":"5","C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\Exam2.js":"6","C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\Exam3.js":"7","C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\redux\\ActionCreators\\GroupActions.js":"8","C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\redux\\auth.js":"9","C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\redux\\groups.js":"10","C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\Home.js":"11","C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\redux\\TestAction.js":"12","C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\Exam.js":"13","C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\Student.js":"14","C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\Header.js":"15","C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\Register.js":"16","C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\EditTest.js":"17","C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\Admin.js":"18","C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\CreateTest.js":"19","C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\GroupDetailStudent.js":"20","C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\Login.js":"21","C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\GroupDetailAdmin.js":"22","C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\AdminTestResultStudent.js":"23","C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\StudentResult.js":"24","C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\StudentResult2.js":"25","C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\AdminTestResultStudent3.js":"26","C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\PasswordRecovery.js":"27","C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\AdminTestResultStudent2.js":"28","C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\StudentResult3.js":"29","C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\Profile.js":"30","C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\AdminSummary.js":"31","C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\redux\\ActionCreators\\RegisterActions.js":"32","C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\AuthIFrame.js":"33","C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\shared\\baseUrl.js":"34","C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\redux\\ActionTypes.js":"35","C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\redux\\ActionCreators\\LoginActions.js":"36","C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\utils\\ImageUtils.js":"37","C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\ContactUs.js":"38","C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\Help.js":"39"},{"size":493,"mtime":1716061862975,"results":"40","hashOfConfig":"41"},{"size":6049,"mtime":1716061862983,"results":"42","hashOfConfig":"41"},{"size":531,"mtime":1716061862950,"results":"43","hashOfConfig":"41"},{"size":545,"mtime":1716136877583,"results":"44","hashOfConfig":"41"},{"size":6607,"mtime":1716399779698,"results":"45","hashOfConfig":"41"},{"size":13543,"mtime":1716061862964,"results":"46","hashOfConfig":"41"},{"size":12930,"mtime":1716061862965,"results":"47","hashOfConfig":"41"},{"size":9983,"mtime":1716136766364,"results":"48","hashOfConfig":"41"},{"size":1906,"mtime":1716136866589,"results":"49","hashOfConfig":"41"},{"size":630,"mtime":1716136897459,"results":"50","hashOfConfig":"41"},{"size":2406,"mtime":1716061862968,"results":"51","hashOfConfig":"41"},{"size":2657,"mtime":1716136926691,"results":"52","hashOfConfig":"41"},{"size":12333,"mtime":1716061862963,"results":"53","hashOfConfig":"41"},{"size":6730,"mtime":1716061862972,"results":"54","hashOfConfig":"41"},{"size":6028,"mtime":1716061862967,"results":"55","hashOfConfig":"41"},{"size":21623,"mtime":1716061862971,"results":"56","hashOfConfig":"41"},{"size":34933,"mtime":1716100687688,"results":"57","hashOfConfig":"41"},{"size":6673,"mtime":1716102313221,"results":"58","hashOfConfig":"41"},{"size":11305,"mtime":1716102431014,"results":"59","hashOfConfig":"41"},{"size":8160,"mtime":1716121422130,"results":"60","hashOfConfig":"41"},{"size":6044,"mtime":1716101322003,"results":"61","hashOfConfig":"41"},{"size":17061,"mtime":1716137445277,"results":"62","hashOfConfig":"41"},{"size":5511,"mtime":1716136407152,"results":"63","hashOfConfig":"41"},{"size":6377,"mtime":1716137546108,"results":"64","hashOfConfig":"41"},{"size":7337,"mtime":1716137582817,"results":"65","hashOfConfig":"41"},{"size":12568,"mtime":1716137771738,"results":"66","hashOfConfig":"41"},{"size":12559,"mtime":1716061862969,"results":"67","hashOfConfig":"41"},{"size":10261,"mtime":1716061862960,"results":"68","hashOfConfig":"41"},{"size":7340,"mtime":1716137607591,"results":"69","hashOfConfig":"41"},{"size":9125,"mtime":1716142803674,"results":"70","hashOfConfig":"41"},{"size":5452,"mtime":1716102471558,"results":"71","hashOfConfig":"41"},{"size":3567,"mtime":1716136790397,"results":"72","hashOfConfig":"41"},{"size":1033,"mtime":1716061862961,"results":"73","hashOfConfig":"41"},{"size":55,"mtime":1716402401696,"results":"74","hashOfConfig":"41"},{"size":1955,"mtime":1716136854440,"results":"75","hashOfConfig":"41"},{"size":4416,"mtime":1716136779637,"results":"76","hashOfConfig":"41"},{"size":1005,"mtime":1716099947325,"results":"77","hashOfConfig":"41"},{"size":5736,"mtime":1716061862962,"results":"78","hashOfConfig":"41"},{"size":2482,"mtime":1716400863831,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"1oraspp",{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"82"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"82"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"82"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"82"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"82"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\index.js",[],["164","165"],"C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\serviceWorker.js",[],"C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\App.js",[],"C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\redux\\configureStore.js",[],"C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\Main.js",[],"C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\Exam2.js",[],"C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\Exam3.js",[],"C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\redux\\ActionCreators\\GroupActions.js",[],"C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\redux\\auth.js",[],"C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\redux\\groups.js",[],"C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\Home.js",[],"C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\redux\\TestAction.js",[],"C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\Exam.js",[],"C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\Student.js",["166","167","168","169"],"import React, { Component } from 'react';\r\nimport { TabContent, TabPane, Nav, NavItem, NavLink, Row, Col, Table, Form, FormGroup, Input, Modal, ModalHeader, ModalBody, Button } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport classnames from 'classnames';\r\nimport { connect } from 'react-redux'\r\nimport { joinGroup, fetchGroups } from '../redux/ActionCreators/GroupActions';\r\nimport { Groups } from '../utils/ImageUtils';\r\n\r\nconst mapStateToProps = state => ({\r\n    groups: state.groups,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    joinGroup: (groupId, req) => dispatch(joinGroup(groupId, req)),\r\n    fetchGroups: (access) => dispatch(fetchGroups(access))\r\n\r\n})\r\n// Student Component to display th elist of group the signed in student is part of\r\n\r\nclass Student extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isModalOpen: false,\r\n            activeTab: '1',\r\n            groupId: '',\r\n            name: '',\r\n            uniqueID: '',\r\n        };\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleJoinGroup = this.handleJoinGroup.bind(this);\r\n        this.toggleTab = this.toggleTab.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        this.props.fetchGroups('users')\r\n    }\r\n    toggleTab(tab) {\r\n        if (this.state.activeTab !== tab) {\r\n            this.setState({\r\n                activeTab: tab\r\n            });\r\n        }\r\n    }\r\n    toggleModal() {\r\n        this.setState({\r\n            isModalOpen: !this.state.isModalOpen\r\n        });\r\n    }\r\n\r\n    handleInputChange(event) {\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const name = target.name;\r\n\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n    handleJoinGroup(event) {\r\n        this.toggleModal();\r\n        alert('The following Req will be Sent to join the Group: ' + this.state.groupId);\r\n        var req = {\r\n            name: this.state.name,\r\n            uniqueID: this.state.uniqueID,\r\n        }\r\n        var groupId = this.state.groupId;\r\n        this.props.joinGroup(groupId, req);\r\n        event.preventDefault();\r\n    }\r\n    render() {\r\n        const groups = this.props.groups.groups;\r\n        var grouplist;\r\n        if (groups) {\r\n            grouplist = groups.map((group, index) => {\r\n                return (\r\n                    <tr className='group-data-row'>\r\n                        <td>{index + 1}</td>\r\n                        <td><img src={Groups} alt=\"Groups\" />{group.name}</td>\r\n                        <td>{group.creator.firstname}</td>\r\n                        <td>{group.tests.length}</td>\r\n                        <td><Link to={`/studentgroups/${group._id}`} ><Button outline color=\"info\" size=\"sm\">Details </Button></Link></td>\r\n                    </tr>\r\n                );\r\n            })\r\n        }\r\n        else {\r\n            grouplist = 'You are not member of Any Group'\r\n        }\r\n        return (\r\n            <div className=\"container mt-5\">\r\n\r\n                {/* A Navigation Tab to switch between old tests and new ones */}\r\n\r\n\r\n                <Nav tabs>\r\n                    <NavItem>\r\n                        <NavLink className={classnames({ active: this.state.activeTab === '1' })} onClick={() => { this.toggleTab('1'); }}>\r\n                            Groups\r\n                        </NavLink>\r\n                    </NavItem>\r\n                </Nav>\r\n\r\n                {/* Contents of both tabs */}\r\n                <div class=\"table-responsive\" activeTab={this.state.activeTab}>\r\n                    <table class=\"table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>S.No.</th>\r\n                                <th>Group Name</th>\r\n                                <th>Created By</th>\r\n                                <th>Tests</th>\r\n                                <th>Group Details</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {grouplist}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <Button className='join-group-btn' onClick={this.toggleModal} type=\"submit\" color=\"primary\">Join Group</Button>\r\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n                    <ModalHeader toggle={this.toggleModal}><strong>Join A Group</strong></ModalHeader>\r\n                    <ModalBody >\r\n                        <Form onSubmit={this.handleJoinGroup}>\r\n                            <FormGroup row>\r\n                                <Col md={10}>\r\n                                    <Input type=\"text\" id=\"groupId\" name=\"groupId\"\r\n                                        placeholder=\"Group ID\"\r\n                                        value={this.state.groupId}\r\n                                        onChange={this.handleInputChange} />\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Col md={10}>\r\n                                    <Input type=\"text\" id=\"name\" name=\"name\"\r\n                                        placeholder=\"Name\"\r\n                                        value={this.state.name}\r\n                                        onChange={this.handleInputChange} />\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Col md={10}>\r\n                                    <Input type=\"text\" id=\"uniqueID\" name=\"uniqueID\"\r\n                                        placeholder=\"Unique ID\"\r\n                                        value={this.state.uniqueID}\r\n                                        onChange={this.handleInputChange} />\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row >\r\n                                <Col md={{ size: 10 }}>\r\n                                    <Button type=\"submit\" color=\"outline-success\" size=\"md\" style={{ float: 'right' }}>\r\n                                        Send Request\r\n                                    </Button>\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Form>\r\n                    </ModalBody>\r\n                </Modal>\r\n            </div>\r\n\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Student);\r\n","C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\Header.js",[],"C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\Register.js",[],"C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\EditTest.js",[],"C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\Admin.js",["170","171","172","173"],"import React, { Component } from 'react';\r\nimport { TabContent, TabPane, Row, Col, Table, Label, Form, FormGroup, Input, Modal, ModalHeader, ModalBody, Button } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { createGroup, acceptMember, removeReq, removeMem, joinGroup, createTest, fetchGroups } from '../redux/ActionCreators/GroupActions.js';\r\nimport { Groups } from '../utils/ImageUtils.js';\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth,\r\n    groups: state.groups,\r\n});\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    createGroup: (group) => dispatch(createGroup(group)),\r\n    acceptMember: (groupId, request) => dispatch(acceptMember(groupId, request)),\r\n    removeReq: (groupId, requestId) => dispatch(removeReq(groupId, requestId)),\r\n    removeMem: (groupId, memberId) => dispatch(removeMem(groupId, memberId)),\r\n    joinGroup: (groupId, request) => dispatch(joinGroup(groupId, request)),\r\n    createTest: (groupId, test) => dispatch(createTest(groupId, test)),\r\n    fetchGroups: (type) => dispatch(fetchGroups(type))\r\n});\r\n\r\n\r\nfunction GroupRows({ group }) {\r\n    return (\r\n        <tr key={group._id} className='group-data-row'>\r\n            <td><img src={Groups} alt=\"Groups\" />{group.name}</td>\r\n            <td>{group.members.length}</td>\r\n            <td>{group.tests.length}</td>\r\n            <td><Link to={`/createtest/${group._id}`}><Button outline color=\"info\" size=\"sm\">Create</Button></Link></td>\r\n            <td><Link to={`/admingroups/${group._id}`} ><Button outline color=\"primary\" size=\"sm\">Details</Button></Link></td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nclass Admin extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isModalOpen: false,\r\n            group_name: '',\r\n            activeTab: '1',\r\n            private: false,\r\n        };\r\n\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleCreateGroup = this.handleCreateGroup.bind(this);\r\n        this.toggleTab = this.toggleTab.bind(this);\r\n    }\r\n\r\n    toggleTab(tab) {\r\n        if (this.state.activeTab !== tab) {\r\n            this.setState({\r\n                activeTab: tab\r\n            });\r\n        }\r\n    }\r\n\r\n    toggleModal() {\r\n        this.setState({\r\n            isModalOpen: !this.state.isModalOpen\r\n        });\r\n    }\r\n\r\n\r\n    handleInputChange(event) {\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const name = target.name;\r\n\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n    handleCreateGroup(event) {\r\n        this.toggleModal();\r\n        alert('The following group will be Initailised Name: ' + this.state.group_name + ' Private: ' + this.state.private);\r\n        var group = {\r\n            name: this.state.group_name,\r\n            isPrivate: this.state.private\r\n        }\r\n        this.props.createGroup(group);\r\n        event.preventDefault();\r\n    }\r\n    componentDidMount() {\r\n        this.props.fetchGroups('admins')\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        const groups = this.props.groups.groups;\r\n        console.log(groups);\r\n        var grouplist;\r\n        if (groups) {\r\n            grouplist = groups.map((g) => {\r\n                return (\r\n                    <GroupRows group={g} />\r\n                );\r\n            });\r\n\r\n        }\r\n        else {\r\n            grouplist = () => {\r\n                return (\r\n                    <tr>There are no Groups</tr>\r\n                );\r\n            };\r\n        }\r\n\r\n\r\n        return (\r\n            <div className=\"container mt-5\">\r\n                <div class=\"table-responsive\" activeTab={this.state.activeTab}>\r\n                    <table class=\"table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Group Name</th>\r\n                                <th>Total Members</th>\r\n                                <th>Total Tests</th>\r\n                                <th>Create New Test</th>\r\n                                <th>Details</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {grouplist}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <Button className='create-group-btn' onClick={this.toggleModal} type=\"submit\" color=\"primary\">Create Group</Button>\r\n\r\n                {/* Create Group Form */}\r\n\r\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n                    <ModalHeader toggle={this.toggleModal}><strong>New Group</strong></ModalHeader>\r\n                    <ModalBody >\r\n                        <Form onSubmit={this.handleCreateGroup}>\r\n                            <FormGroup row>\r\n                                <Col md={10}>\r\n                                    <Input type=\"text\" id=\"group_name\" name=\"group_name\"\r\n                                        placeholder=\"Group Name\"\r\n                                        value={this.state.group_name}\r\n                                        onChange={this.handleInputChange} />\r\n                                </Col>\r\n                            </FormGroup>\r\n\r\n                            <FormGroup check>\r\n                                <Label check>\r\n                                    <Input type=\"checkbox\"\r\n                                        name=\"private\"\r\n                                        checked={this.state.private}\r\n                                        onChange={this.handleInputChange} /> {' '}\r\n                                    <strong> Create a Private Group</strong>\r\n                                    <p>Private group enables users with  group ID Code to send Join Request , Public group (default) enable users to directly join with group ID code.</p>\r\n                                </Label>\r\n                            </FormGroup>\r\n\r\n                            <FormGroup row >\r\n                                <Col md={{ size: 10 }}>\r\n                                    <Button type=\"submit\" color=\"success\" size=\"md\" style={{ float: 'right' }}>\r\n                                        Create\r\n                                    </Button>\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Form>\r\n                    </ModalBody>\r\n                </Modal>\r\n            </div>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Admin);\r\n","C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\CreateTest.js",[],"C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\GroupDetailStudent.js",["174","175"],"import React, { Component } from 'react';\r\nimport { TabContent, TabPane, Nav, NavItem, NavLink, Row, Col, Button } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport classnames from 'classnames';\r\nimport { baseUrl } from '../shared/baseUrl';\r\nimport moment from 'moment';\r\n///This component shows the list of tests present in a specific group for student to give\r\n//From this component he can start exam or see response sheet if test is over and evaluated\r\n\r\n\r\n\r\n\r\nclass GroupDetailStudent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            activeTab: '1',\r\n            isFetching: 'false',\r\n            group: null,\r\n        };\r\n\r\n        this.toggleTab = this.toggleTab.bind(this);\r\n        this.fetchGroupwithID = this.fetchGroupwithID.bind(this);\r\n    }\r\n    toggleTab(tab) {\r\n        if (this.state.activeTab !== tab) {\r\n            this.setState({\r\n                activeTab: tab\r\n            });\r\n        }\r\n    }\r\n    fetchGroupwithID = (groupId) => {\r\n        const bearer = 'Bearer ' + localStorage.getItem('token');\r\n        this.setState({ ...this.state, isFetching: true });\r\n        fetch(baseUrl + 'student/' + groupId + '/getTestByGroup', {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                'Authorization': bearer\r\n            },\r\n            credentials: \"same-origin\"\r\n        })\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                this.setState({ group: result, isFetching: false })\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n                this.setState({ ...this.state, isFetching: false });\r\n            });\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.fetchGroupwithID(this.props.match.params.groupId);\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        if (this.state.isFetching) {\r\n            return (\r\n                <h2 className='loading'>Loading Tests.....</h2>\r\n            );\r\n        }\r\n        else {\r\n            console.log(this.state.group.tests)\r\n            const tests = this.state.group.tests;\r\n            console.log(tests);\r\n            var testslist;\r\n            if (tests.length) {\r\n                testslist = tests.map((test, index) => {\r\n                    var testtype;\r\n                    if (test.testType === '1') {\r\n                        testtype = \"MCQ Only\"\r\n                    }\r\n                    if (test.testType === '2') {\r\n                        testtype = \"MCQ + Fill in the blanks\"\r\n                    }\r\n                    if (test.testType === '3') {\r\n                        testtype = \"Assignment Type\"\r\n                    }\r\n                    var negative = test.negative ? \"YES\" : \"NO\";\r\n                    var negPercentage = test.negative ? test.negPercentage : \"0\";\r\n                    if (test.isCompleted) {\r\n\r\n                        return (\r\n                            <tr className='group-data-row'>\r\n                                <td>{test.title}</td>\r\n                                <td>{moment.utc(test.startDate).local().format('llll')}</td>\r\n                                <td>{test.subject}</td>\r\n                                <td>{test.duration}</td>\r\n                                <td>{testtype}</td>\r\n                                <td>{negative}</td>\r\n                                <td>{negPercentage}</td>\r\n                                <td>{test.totalMarks}</td>\r\n                                <td>\r\n                                    <Link to={`/student/result/${test.testType}/${test._id}`} ><Button outline color=\"success\" size=\"sm\">Results</Button></Link>\r\n                                </td>\r\n                            </tr>\r\n\r\n                        );\r\n                    }\r\n                    else {\r\n                        var examlink;\r\n                        if (test.testType === '1') {\r\n                            examlink = `/exam1/${this.state.group._id}/${test._id}`;\r\n                        }\r\n                        else if (test.testType === '2') {\r\n                            examlink = `/exam2/${this.state.group._id}/${test._id}`;\r\n                        }\r\n                        else if (test.testType === '3') {\r\n                            examlink = `/exam3/${this.state.group._id}/${test._id}`;\r\n                        }\r\n                        return (\r\n                            <tr className='group-data-row'>\r\n                                <td>{test.title}</td>\r\n                                <td>{moment.utc(test.startDate).local().format('llll')}</td>\r\n                                <td>{test.subject}</td>\r\n                                <td>{test.duration}</td>\r\n                                <td>{testtype}</td>\r\n                                <td>{negative}</td>\r\n                                <td>{negPercentage}</td>\r\n                                <td>{test.totalMarks}</td>\r\n                                <td>\r\n                                    <Link to={examlink} ><Button outline color=\"primary\" size=\"sm\">Start Test</Button></Link>\r\n                                </td>\r\n                            </tr>\r\n\r\n                        );\r\n\r\n                    }\r\n\r\n\r\n                })\r\n            }\r\n            else {\r\n                testslist = 'No tests Available Yet'\r\n            }\r\n            var grouptype = this.state.group.isPrivate ? 'Private' : 'Public';\r\n            return (\r\n                <div className=\"container mt-5\">\r\n                    <Nav tabs>\r\n                        <NavItem>\r\n                            <NavLink className={classnames({ active: this.state.activeTab === '1' })} onClick={() => { this.toggleTab('1'); }}>\r\n                                Tests\r\n                            </NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink className={classnames({ active: this.state.activeTab === '2' })} onClick={() => { this.toggleTab('2'); }}>\r\n                                Group Details\r\n                            </NavLink>\r\n                        </NavItem>\r\n                    </Nav>\r\n                    <TabContent activeTab={this.state.activeTab}>\r\n\r\n                        <TabPane tabId=\"1\">\r\n                            <div class=\"table-responsive\">\r\n                                <table class=\"table\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>Test Name</th>\r\n                                            <th>Start Date</th>\r\n                                            <th>Subject</th>\r\n                                            <th>Duration(in Mins)</th>\r\n                                            <th>Test Type</th>\r\n                                            <th>Negative Marking</th>\r\n                                            <th>Negative Percentage</th>\r\n                                            <th>Total Marks</th>\r\n                                            <th>Start/Result</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {testslist}\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n\r\n                        </TabPane>\r\n\r\n                        <TabPane tabId=\"2\">\r\n                            <div className='group-details'>\r\n                                <h5>Group Name: <span>{this.state.group.name}</span></h5>\r\n                                <h5>Group Type: <span>{grouptype}</span></h5>\r\n                                <h5>\r\n                                    Group ID: <span>{this.state.group._id}</span>\r\n                                </h5>\r\n                            </div>\r\n\r\n                        </TabPane>\r\n                    </TabContent>\r\n                </div>\r\n\r\n\r\n            );\r\n        }\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default GroupDetailStudent;\r\n","C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\Login.js",[],"C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\GroupDetailAdmin.js",["176","177","178"],"import React, { Component } from 'react';\r\nimport { TabContent, TabPane, Nav, NavItem, NavLink, Row, Col, Table, Button, } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport classnames from 'classnames';\r\nimport { connect } from 'react-redux';\r\nimport { acceptMember, removeMem, removeReq, DeleteGroup } from '../redux/ActionCreators/GroupActions'\r\nimport { baseUrl } from '../shared/baseUrl';\r\nimport moment from 'moment';\r\n\r\n\r\n\r\n///This component shows the groups specifics of a given group created by admin\r\n//He can add members and delete members and create test from this component \r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n\r\n    acceptMember: (groupId, request) => dispatch(acceptMember(groupId, request)),\r\n    removeReq: (groupId, requestId) => dispatch(removeReq(groupId, requestId)),\r\n    removeMem: (groupId, memberId) => dispatch(removeMem(groupId, memberId)),\r\n    DeleteGroup: (groupId) => dispatch(DeleteGroup(groupId))\r\n});\r\n\r\n\r\n\r\nclass GroupDetailAdmin extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            activeTab: '1',\r\n            isFetching: 'false',\r\n            group: null,\r\n        };\r\n\r\n        this.handleAcceptmember = this.handleAcceptmember.bind(this);\r\n        this.handleRemoveMember = this.handleRemoveMember.bind(this);\r\n        this.handleDeleteReq = this.handleDeleteReq.bind(this);\r\n        this.toggleTab = this.toggleTab.bind(this);\r\n        this.fetchGroupwithID = this.fetchGroupwithID.bind(this);\r\n        this.removeMem = this.removeMem.bind(this);\r\n        this.removeReq = this.removeReq.bind(this);\r\n        this.acceptMember = this.acceptMember.bind(this);\r\n        this.handleDeleteGroup = this.handleDeleteGroup.bind(this);\r\n    }\r\n    toggleTab(tab) {\r\n        if (this.state.activeTab !== tab) {\r\n            this.setState({\r\n                activeTab: tab\r\n            });\r\n        }\r\n    }\r\n    fetchGroupwithID = (groupId) => {\r\n        const bearer = 'Bearer ' + localStorage.getItem('token');\r\n        this.setState({ ...this.state, isFetching: true });\r\n        fetch(baseUrl + 'groups/' + groupId, {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                'Authorization': bearer\r\n            },\r\n            credentials: \"same-origin\"\r\n        })\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                this.setState({ group: result, isFetching: false })\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n                this.setState({ ...this.state, isFetching: false });\r\n            });\r\n    };\r\n    removeMem = (groupId, member) => {\r\n\r\n        const bearer = 'Bearer ' + localStorage.getItem('token');\r\n        var request = {\r\n            groupId: groupId,\r\n            memberId: member._id,\r\n            name: member.name,\r\n            uniqueID: member.uniqueID,\r\n            userID: member.userID\r\n        }\r\n        return fetch(baseUrl + 'groups/' + groupId + '/member', {\r\n            method: \"DELETE\",\r\n            body: JSON.stringify(request),\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                'Authorization': bearer\r\n            },\r\n            credentials: \"same-origin\"\r\n        })\r\n            .then(response => {\r\n                if (response) {\r\n                    return response;\r\n                } else {\r\n                    var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n                    error.response = response;\r\n                    throw error;\r\n                }\r\n            },\r\n                error => {\r\n                    throw error;\r\n                })\r\n            .then(response => response.json())\r\n            .then(Newgroup => {\r\n                console.log('Group Updated', Newgroup);\r\n                this.setState({\r\n                    group: Newgroup\r\n                })\r\n            })\r\n            .catch(error => console.log(error));\r\n    }\r\n    removeReq = (groupId, reqId) => {\r\n\r\n        const bearer = 'Bearer ' + localStorage.getItem('token');\r\n        var request = {\r\n            groupId: groupId,\r\n            requestId: reqId\r\n        }\r\n        return fetch(baseUrl + 'groups/' + groupId + '/removereq', {\r\n            method: \"DELETE\",\r\n            body: JSON.stringify(request),\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                'Authorization': bearer\r\n            },\r\n            credentials: \"same-origin\"\r\n        })\r\n            .then(response => {\r\n                if (response) {\r\n                    return response;\r\n                } else {\r\n                    var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n                    error.response = response;\r\n                    throw error;\r\n                }\r\n            },\r\n                error => {\r\n                    throw error;\r\n                })\r\n            .then(response => response.json())\r\n            .then(Newgroup => {\r\n                console.log('Group Updated', Newgroup);\r\n                this.setState({\r\n                    group: Newgroup\r\n                })\r\n            })\r\n            .catch(error => console.log(error));\r\n    }\r\n\r\n    acceptMember = (groupId, request) => {\r\n\r\n        const bearer = 'Bearer ' + localStorage.getItem('token');\r\n\r\n        return fetch(baseUrl + 'groups/' + groupId + '/member', {\r\n            method: \"PUT\",\r\n            body: JSON.stringify(request),\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                'Authorization': bearer\r\n            },\r\n            credentials: \"same-origin\"\r\n        })\r\n            .then(response => {\r\n                if (response) {\r\n                    return response;\r\n                } else {\r\n                    var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n                    error.response = response;\r\n                    throw error;\r\n                }\r\n            },\r\n                error => {\r\n                    throw error;\r\n                })\r\n            .then(response => response.json())\r\n            .then(Newgroup => {\r\n                console.log('Group Updated', Newgroup);\r\n                this.setState({\r\n                    group: Newgroup\r\n                })\r\n            })\r\n            .catch(error => console.log(error));\r\n    }\r\n    componentDidMount() {\r\n        this.fetchGroupwithID(this.props.match.params.groupId);\r\n    }\r\n\r\n    handleAcceptmember(req) {\r\n        var request = {\r\n            requestId: req._id,\r\n            name: req.name,\r\n            uniqueID: req.uniqueID,\r\n            userID: req.userID\r\n        }\r\n        this.acceptMember(this.state.group._id, request);\r\n    }\r\n    handleDeleteReq(req) {\r\n\r\n        this.removeReq(this.state.group._id, req._id);\r\n    }\r\n    handleRemoveMember(req) {\r\n        this.removeMem(this.state.group._id, req);\r\n\r\n    }\r\n    handleDeleteGroup() {\r\n        var y = window.confirm(\"Are You Really want to delete the group? All Data Related to the group will be lost and It is Irriversible Operation\");\r\n        if (y) {\r\n            this.props.DeleteGroup(this.state.group._id);\r\n            this.props.history.push('/');\r\n        }\r\n        else {\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isFetching) {\r\n            return (\r\n                <h2 className='loading'>Loading Groups.....</h2>\r\n            );\r\n        }\r\n        else if (!this.state.group) {\r\n            return (\r\n                <h2 className='loading'>Group not found.</h2>\r\n            );\r\n        }\r\n        else {\r\n            console.log(this.state.group)\r\n            var pendingReqList;\r\n            const group = this.state.group;\r\n            console.log(group);\r\n            if (group && group.pendingReq && group.pendingReq.length) {\r\n                pendingReqList = group.pendingReq.map((req) => {\r\n                    return (\r\n                        <tr key={req.uniqueID} className='group-data-row'>\r\n                            <td>{req.name}</td>\r\n                            <td>{req.uniqueID}</td>\r\n                            <td>\r\n                                <Button type=\"submit\" color=\"outline-primary\" size=\"sm\" onClick={() => this.handleAcceptmember(req)}>Confirm</Button>{' '}\r\n                                <Button type=\"submit\" color=\"outline-danger\" size=\"sm\" onClick={() => this.handleDeleteReq(req)}>Delete</Button>\r\n                            </td>\r\n                        </tr>\r\n                    );\r\n                });\r\n            } else {\r\n                pendingReqList = 'There are No Pending Req';\r\n            }\r\n\r\n            var memberList;\r\n            if (group && group.members && group.members.length) {\r\n                memberList = group.members.map((req, index) => {\r\n                    var sno = index + 1;\r\n                    return (\r\n                        <tr key={sno} className='group-data-row'>\r\n                            <td>{sno}</td>\r\n                            <td>{req.name}</td>\r\n                            <td>{req.uniqueID}</td>\r\n                            <td><Button outline color=\"danger\" size=\"sm\" onClick={() => this.handleRemoveMember(req)}> Remove Member </Button></td>\r\n                            <td><Link to=\"#\"><Button outline color=\"primary\" size=\"sm\"> Details </Button></Link></td>\r\n                        </tr>\r\n                    );\r\n                });\r\n            } else {\r\n                memberList = 'There are No Members in the group';\r\n            }\r\n\r\n            var testslist;\r\n            if (group && group.tests && group.tests.length) {\r\n                testslist = group.tests.map((test, index) => {\r\n                    var testtype;\r\n                    if (test.testType === '1') {\r\n                        testtype = \"MCQ Only\";\r\n                    } else if (test.testType === '2') {\r\n                        testtype = \"MCQ + Fill in the blanks\";\r\n                    } else if (test.testType === '3') {\r\n                        testtype = \"Assignment Type\";\r\n                    }\r\n\r\n                    var negative = test.negative ? \"YES\" : \"NO\";\r\n                    var negPercentage = test.negative ? test.negPercentage : \"0\";\r\n\r\n                    return (\r\n                        <tr key={test._id} className='group-data-row'>\r\n                            <td>{test.title}</td>\r\n                            <td>{moment.utc(test.startDate).local().format('llll')}</td>\r\n                            <td>{test.subject}</td>\r\n                            <td>{test.duration}</td>\r\n                            <td>{testtype}</td>\r\n                            <td>{negative}</td>\r\n                            <td>{negPercentage}</td>\r\n                            <td>{test.totalMarks}</td>\r\n                            <td>\r\n                                <Link to={`/edittest/${group._id}/${test._id}`}><Button outline color=\"info\" size=\"sm\">Edit</Button></Link>\r\n                            </td>\r\n                            <td>\r\n                                <Link to={`/adminSummary/${test.testType}/${test._id}`}><Button outline color=\"primary\" size=\"sm\">Click</Button></Link>\r\n                            </td>\r\n                        </tr>\r\n                    );\r\n                });\r\n            } else {\r\n                testslist = 'No tests Created Yet';\r\n            }\r\n\r\n            var grouptype = group.isPrivate ? 'Private' : 'Public';\r\n\r\n            return (\r\n                <div className=\"container mt-5\">\r\n                    <Nav tabs>\r\n                        <NavItem>\r\n                            <NavLink className={classnames({ active: this.state.activeTab === '1' })} onClick={() => { this.toggleTab('1'); }}>\r\n                                Tests\r\n                            </NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink className={classnames({ active: this.state.activeTab === '2' })} onClick={() => { this.toggleTab('2'); }}>\r\n                                Pending Request\r\n                            </NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink className={classnames({ active: this.state.activeTab === '3' })} onClick={() => { this.toggleTab('3'); }}>\r\n                                Group Member\r\n                            </NavLink>\r\n                        </NavItem>\r\n\r\n                        <NavItem>\r\n                            <NavLink className={classnames({ active: this.state.activeTab === '4' })} onClick={() => { this.toggleTab('4'); }}>\r\n                                Group Details\r\n                            </NavLink>\r\n                        </NavItem>\r\n                    </Nav>\r\n                    <TabContent activeTab={this.state.activeTab}>\r\n                        <TabPane tabId=\"2\">\r\n                            <div class=\"table-responsive\">\r\n                                <table class=\"table\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>Name</th>\r\n                                            <th>Unique Id</th>\r\n                                            <th>Requests</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {pendingReqList}\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </TabPane>\r\n                        <TabPane tabId=\"3\">\r\n                            <div class=\"table-responsive\">\r\n                                <table class=\"table\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>S.N.</th>\r\n                                            <th>Name</th>\r\n                                            <th>Unique Id</th>\r\n                                            <th>Remove</th>\r\n                                            <th>Details</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {memberList}\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </TabPane>\r\n\r\n                        <TabPane tabId=\"1\">\r\n                            <div class=\"table-responsive\">\r\n                                <table class=\"table\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>Test Name</th>\r\n                                            <th>Tentative Start Time</th>\r\n                                            <th>Subject</th>\r\n                                            <th>Max. Duration(in Min)</th>\r\n                                            <th>Test Type</th>\r\n                                            <th>Negative Mark.</th>\r\n                                            <th>Neg. Percentage</th>\r\n                                            <th>Max. Score</th>\r\n                                            <th>Preview</th>\r\n                                            <th>Summary</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {testslist}\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                            <Link to={`/createtest/${group._id}`} ><Button className='create-test-btn' color=\"pink\" size=\"sm\">Create New Test</Button></Link>\r\n                        </TabPane>\r\n\r\n                        <TabPane tabId=\"4\">\r\n                            <div className='group-details'>\r\n                                <h5>Group Name: <span>{group.name}</span></h5>\r\n                                <h5>Group Type: <span>{grouptype}</span></h5>\r\n                                <h5>\r\n                                    Group ID: <span>{group._id}</span>\r\n                                </h5>\r\n                                <p><span>*</span>Share the above group ID with Students to help them send a join req to the Group</p>\r\n                            </div>\r\n                            <Button color=\"red\" size=\"sm\" onClick={this.handleDeleteGroup}> Delete this Group </Button>\r\n\r\n                        </TabPane>\r\n                    </TabContent>\r\n                </div>\r\n\r\n\r\n            );\r\n        }\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(GroupDetailAdmin);\r\n","C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\AdminTestResultStudent.js",[],"C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\StudentResult.js",[],"C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\StudentResult2.js",[],"C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\AdminTestResultStudent3.js",[],"C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\PasswordRecovery.js",[],"C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\AdminTestResultStudent2.js",[],"C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\StudentResult3.js",[],"C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\Profile.js",[],"C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\AdminSummary.js",["179"],"import React, { Component } from 'react';\r\nimport { Table, Button } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { baseUrl } from '../shared/baseUrl';\r\n\r\n//Component to generate test summary. this component fetches student list who attempted the test and link to see their reponses\r\n\r\n\r\nclass AdminSummary extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isFetching: 'false',\r\n            group: null,\r\n        };\r\n        this.downloadfile = this.downloadfile.bind(this);\r\n    }\r\n\r\n    downloadfile() {\r\n        const bearer = 'Bearer ' + localStorage.getItem('token');\r\n        const testid = this.props.match.params.testId;\r\n        fetch(baseUrl + 'admin/resultDownload/' + testid, {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"text/csv\",\r\n                'Authorization': bearer\r\n            },\r\n            credentials: \"same-origin\"\r\n        }).then(response => response.blob())\r\n            .then(blob => {\r\n                const link = document.createElement('a');\r\n                link.href = URL.createObjectURL(blob);\r\n                link.download = `Result-${this.props.match.params.testId}.csv`;\r\n                link.click();\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n\r\n        // const link =document.createElement('a');\r\n        // link.href='data:text/csv,'+encodeURIComponent(csv);\r\n        // link.download=`Result-${this.props.match.params.testId}.csv`;\r\n        // link.click();\r\n    }\r\n\r\n    componentDidMount() {\r\n        const bearer = 'Bearer ' + localStorage.getItem('token');\r\n        const testid = this.props.match.params.testId;\r\n        this.setState({ ...this.state, isFetching: true });\r\n        // fetch(baseUrl+'admin/resultDownload/'+testid, {\r\n        //     method: \"GET\",\r\n        //     headers: {\r\n        //       \"Content-Type\": \"text/csv\",\r\n        //       'Authorization': bearer\r\n        //     },\r\n        //     credentials: \"same-origin\"\r\n        // })\r\n        // \t.then(response => response.blob())\r\n        // \t.then(response => {\r\n        // \t\tvar blob = new Blob([response], { type })\r\n        // \t\tconst obj = URL.createObjectURL(blob)\r\n        // \t\tthis.setState({ blobObject: obj })\r\n        // \t})\r\n        // \t.catch(e => console.error(\"Error\", e))\r\n        fetch(baseUrl + 'admin/results/' + testid, {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                'Authorization': bearer\r\n            },\r\n            credentials: \"same-origin\"\r\n        })\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                this.setState({ group: result, isFetching: false })\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n                this.setState({ ...this.state, isFetching: false });\r\n            });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isFetching) {\r\n            return (\r\n                <h2 className='loading'>Loading Group Result Summary.....</h2>\r\n            );\r\n        }\r\n        else {\r\n            console.log(this.state.group)\r\n            const group = this.state.group;\r\n\r\n            var testslist;\r\n            if (group.length) {\r\n                testslist = group.map((user, index) => {\r\n\r\n                    return (\r\n                        <tr>\r\n                            <td>{index + 1}</td>\r\n                            <td>{user.name}</td>\r\n                            <td>{user.uniqueID}</td>\r\n                            <td>{user.totalMarks}</td>\r\n                            <td>{user.posMarks}</td>\r\n                            <td>{user.negMarks}</td>\r\n                            <td>{user.marks}</td>\r\n\r\n                            <td>\r\n                                <Link to={`/adminresult/${this.props.match.params.testType}/${this.props.match.params.testId}/${user.userID}`} ><Button color=\"yellow\" size=\"sm\">See Responses</Button></Link>\r\n                            </td>\r\n                        </tr>\r\n\r\n                    );\r\n\r\n                })\r\n            }\r\n            else {\r\n                testslist = 'No Members submitted Yet'\r\n            }\r\n            return (\r\n                <div className=\"container mt-5\">\r\n                    <Button color=\"yellow\" size=\"sm\" className='mb-3' onClick={this.downloadfile}> Download Sheet</Button>\r\n                    <div class=\"table-responsive\">\r\n                        <table class=\"table\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>S. No.</th>\r\n                                    <th>Name</th>\r\n                                    <th>Unique Id</th>\r\n                                    <th>Maximum Marks</th>\r\n                                    <th>Positive Marks</th>\r\n                                    <th>Negative Marks</th>\r\n                                    <th>Marks</th>\r\n                                    <th>Responses</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {testslist}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default AdminSummary;\r\n","C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\redux\\ActionCreators\\RegisterActions.js",[],"C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\AuthIFrame.js",[],"C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\shared\\baseUrl.js",[],"C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\redux\\ActionTypes.js",[],"C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\redux\\ActionCreators\\LoginActions.js",[],"C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\utils\\ImageUtils.js",[],"C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\ContactUs.js",[],"C:\\Users\\Ritik Kumar\\OneDrive\\Desktop\\Assessify\\client\\src\\components\\Help.js",[],{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","replacedBy":"183"},{"ruleId":"184","severity":1,"message":"185","line":2,"column":10,"nodeType":"186","messageId":"187","endLine":2,"endColumn":20},{"ruleId":"184","severity":1,"message":"188","line":2,"column":22,"nodeType":"186","messageId":"187","endLine":2,"endColumn":29},{"ruleId":"184","severity":1,"message":"189","line":2,"column":54,"nodeType":"186","messageId":"187","endLine":2,"endColumn":57},{"ruleId":"184","severity":1,"message":"190","line":2,"column":64,"nodeType":"186","messageId":"187","endLine":2,"endColumn":69},{"ruleId":"184","severity":1,"message":"185","line":2,"column":10,"nodeType":"186","messageId":"187","endLine":2,"endColumn":20},{"ruleId":"184","severity":1,"message":"188","line":2,"column":22,"nodeType":"186","messageId":"187","endLine":2,"endColumn":29},{"ruleId":"184","severity":1,"message":"189","line":2,"column":31,"nodeType":"186","messageId":"187","endLine":2,"endColumn":34},{"ruleId":"184","severity":1,"message":"190","line":2,"column":41,"nodeType":"186","messageId":"187","endLine":2,"endColumn":46},{"ruleId":"184","severity":1,"message":"189","line":2,"column":54,"nodeType":"186","messageId":"187","endLine":2,"endColumn":57},{"ruleId":"184","severity":1,"message":"191","line":2,"column":59,"nodeType":"186","messageId":"187","endLine":2,"endColumn":62},{"ruleId":"184","severity":1,"message":"189","line":2,"column":54,"nodeType":"186","messageId":"187","endLine":2,"endColumn":57},{"ruleId":"184","severity":1,"message":"191","line":2,"column":59,"nodeType":"186","messageId":"187","endLine":2,"endColumn":62},{"ruleId":"184","severity":1,"message":"190","line":2,"column":64,"nodeType":"186","messageId":"187","endLine":2,"endColumn":69},{"ruleId":"184","severity":1,"message":"190","line":2,"column":10,"nodeType":"186","messageId":"187","endLine":2,"endColumn":15},"no-native-reassign",["192"],"no-negated-in-lhs",["193"],"no-unused-vars","'TabContent' is defined but never used.","Identifier","unusedVar","'TabPane' is defined but never used.","'Row' is defined but never used.","'Table' is defined but never used.","'Col' is defined but never used.","no-global-assign","no-unsafe-negation"]